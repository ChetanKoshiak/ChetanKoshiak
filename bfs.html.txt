<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>bfs</title>
</head>
<body>
    <h1>bfs problem</h1>
    <h2>We have an NxM grid, grid have one element named Bob. Bob can travel diagonally blocks only. The grid has some blocked
    blocks on which Bob can not travel. Write a function that returns on how many possible positions Bob can move. Solve
    this problem using BFS and submit the executable code in any programming language. In the following image example, Bob's
    positioning is at 9,3, and it can visit the places where Y is marked; hence your method should return 31. *</h2>
    <p id="final">Total Number of Y where bob can visit</p>

    <script type="text/javascript" charset="utf-8">
         var bobPath = [
                [0, 0, 1, 0, 1, 0, 1, 0],
                [0, 0, 0, 1, 0, 0, 0, 1],
                [1, 0, 1, 0, 0, 0, 1, 0],
                [0, 1, 0, 1, 0, 1, 0, 1],
                [1, 0, 1, 0, 1, 0, 0, 0],
                [0, 1, 0, 1, 0, 1, 0, 0],
                [1, 0, 1, 0, 1, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, 0, 1],
                [1, 0, 1, 0, 1, 0, 1, 0],
                [0, 1, 0, 8, 0, 1, 0, 1]
            ];
            bfs(bobPath,9,3);

            function bfs(graph,node,pos){
                var tempArr = [];
                var queue = graph[node];
                var Be = [];
                var path_counter = 0;
                var len = new Array(graph.length);
                for (i = 0; i < graph.length; i++) {
                    len[i] = new Array(queue.length);
                }
                for (var i = 0; i < graph.length; i++) {
                    for (var j = 0; j < queue.length; j++) {
                        len[i][j] = "unvisited";
                    }
                }

                 var Bob_Enqueue = [[node, pos]];

                while (Bob_Enqueue.length != 0) {
                    if (node == 9 && pos == 7) {
                        var lowerQ = graph[node - 1];
                        var lowerdiagR = lowerQ[pos - 1];
                        var isTraversedR = (len[node - 1][pos - 1]);
                        if (lowerdiagR == 1 && isTraversedR == "unvisited") {
                            Bob_Enqueue.push([node - 1, pos - 1]);
                            len[node - 1][pos - 1] = "visited";
                        }

                    }
                    else if (node == 0) {
                        var upperQ = graph[node + 1];
                        var upperdiagL = upperQ[pos - 1];
                        var upperdiagR = upperQ[pos + 1];
                        var isTraversedL = (len[node + 1][pos - 1]);
                        var isTraversedR = (len[node + 1][pos + 1]);

                        if (upperdiagL == 1 && isTraversedL == "unvisited") {
                            Bob_Enqueue.push([node + 1, pos - 1]);
                            len[node + 1][pos - 1] = "visited";
                        }
                        if (upperdiagR == 1 && isTraversedR == "unvisited") {
                            Bob_Enqueue.push([node + 1, pos + 1]);
                            len[node + 1][pos + 1] = "visited";
                        }
                    }
                    else if (pos == 0) {
                        var upperQ = graph[node + 1];
                        var lowerQ = graph[node - 1];
                        var upperdiagR = upperQ[pos + 1];
                        var lowerdiagR = lowerQ[pos + 1];
                        var isTraversedR = (len[node - 1][pos + 1]);
                        var isTraversedUR = (len[node + 1][pos + 1]);

                        if (lowerdiagR == 1 && isTraversedR == "unvisited") {
                            Bob_Enqueue.push([node - 1, pos + 1]);
                            len[node - 1][pos + 1] = "visited";
                        }
                        if (upperdiagR == 1 && isTraversedUR == "unvisited") {
                            Bob_Enqueue.push([node + 1, pos + 1]);
                            len[node + 1][pos + 1] = "visited";
                        }
                    }
                    else if (pos == 7) {
                        var upperQ = graph[node + 1];
                        var lowerQ = graph[node - 1];
                        var upperdiagL = upperQ[pos - 1];
                        var lowerdiagL = lowerQ[pos - 1];
                        var isTraversedL = (len[node - 1][pos - 1]);
                        var isTraversedUL = (len[node + 1][pos - 1]);

                        if (lowerdiagL == 1 && isTraversedL == "unvisited") {
                            Bob_Enqueue.push([node - 1, pos - 1]);
                            len[node - 1][pos - 1] = "visited";
                        }
                        if (upperdiagL == 1 && isTraversedUL == "unvisited") {
                            Bob_Enqueue.push([node + 1, pos - 1]);
                            len[node + 1][pos - 1] = "visited";
                        }
                    }
                    else if (node < 9 && pos < 7) {
                        var upperQ = graph[node + 1];
                        var lowerQ = graph[node - 1];
                        var upperdiagL = upperQ[pos - 1];
                        var upperdiagR = upperQ[pos + 1];
                        var lowerdiagL = lowerQ[pos - 1];
                        var lowerdiagR = lowerQ[pos + 1];
                        var isTraversedL = (len[node - 1][pos - 1]);
                        var isTraversedR = (len[node - 1][pos + 1]);
                        var isTraversedUL = (len[node + 1][pos - 1]);
                        var isTraversedUR = (len[node + 1][pos + 1]);

                        if (lowerdiagL == 1 && isTraversedL == "unvisited") {
                            Bob_Enqueue.push([node - 1, pos - 1]);
                            len[node - 1][pos - 1] = "visited";
                        }
                        if (lowerdiagR == 1 && isTraversedR == "unvisited") {
                            Bob_Enqueue.push([node - 1, pos + 1]);
                            len[node - 1][pos + 1] = "visited";
                        }
                        if (upperdiagL == 1 && isTraversedUL == "unvisited") {
                            Bob_Enqueue.push([node + 1, pos - 1]);
                            len[node + 1][pos - 1] = "visited";
                        }
                        if (upperdiagR == 1 && isTraversedUR == "unvisited") {
                            Bob_Enqueue.push([node + 1, pos + 1]);
                            len[node + 1][pos + 1] = "visited";
                        }
                    }
                    else if (node == 9) {
                        var lowerQ = graph[node - 1];
                        var lowerdiagL = lowerQ[pos - 1];
                        var lowerdiagR = lowerQ[pos + 1];
                        var isTraversedL = (len[node - 1][pos - 1]);
                        var isTraversedR = (len[node - 1][pos + 1]);

                        if (lowerdiagL == 1 && isTraversedL == "unvisited") {
                            Bob_Enqueue.push([node - 1, pos - 1]);
                            len[node - 1][pos - 1] = "visited";
                        }
                        if (lowerdiagR == 1 && isTraversedR == "unvisited") {
                            Bob_Enqueue.push([node - 1, pos + 1]);
                            len[node - 1][pos + 1] = "visited";
                        }
                    }

                    var temp = Bob_Enqueue.shift();
                    tempArr.push(temp);
                    if (Bob_Enqueue.length != 0) {
                        path_counter++;
                        Be = Bob_Enqueue[0];
                        node = Be[0];
                        pos = Be[1];
                    }
                }
                document.getElementById("final").innerHTML = "Bob can traverse on following number of positions :" + path_counter;
            }
    </script>
</body>
</html>